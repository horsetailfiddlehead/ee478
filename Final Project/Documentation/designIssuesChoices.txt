Hardware and Software Issues and Design Choices:

Hardware:

discovered there are not enough UART and SSP modules on current (PIC18f22k25) Microcontrollers. 
Solution: purchased a PIC with more UART,SSP modules from the same family. Also gives us more GPIO pins to work with

DLP reader only capable of reading 2 cards closely spaced. Cannot read 4 cards required by spec.
Solution: several options including use larger antenna and moving reader. Choice made to go with moving reader, as should be simpler to implement

5/23: decided to move display to frontend; rfid/motor/leds moved to backend 

5/24: Keypad uses internal pullups from portB (could also use PortA?) to simplify # of external components. 

5/27: Decided to save pins by using a GAL22v10 to encode card led output. Used gal over pal b/c of latches to hold desired output states for 2 pins/LED.
Choice reduces PIC outputs from 8 to 4 pins. Also chose to use only red/green because gal has 10 outputs and gives sufficient colors.

6/4: excessive voltage noise ~40-5-kHz on 3.3v power rail. Prevented proper operation of XBee (or sounds). Traced to Voltage regulator. 10uF bypass cap
reduced levels to manageable limits, alloing correct operation of xbee and sounds.

Software

5/24: Keypad scanner polls each row, deducing which key is pressed. Tests showed function runs < 450us so no reason to try to optimize function.
difficulty with initial implementation. port outputs were not occurring as expected. fixed by moving to different port bank (see HW), using different polling scheme, and explicitly disabling analog inputs.

5/27: decided to use simple deterministic, non-preemptive scheduler. Global variables are held in a single data struct accessible by all functions

5/28: decided to poll the keypad when expecting user input. Using passing a pointer to global data variables.

6/1: had ongoing issue with RFID reader when moving into the full project. Issue tracked to function calls in ISR causing long context switches. Compiler does not know what variables are needed when doing context switch to function, so saves entire state of program. Solution: reworked program to eliminate function calls (some were echos for debug, other accessed UART register). Could also use compiler instructions to not save values (source: http://www.xargs.com/pic/c18-isr-optim.pdf)

6/4: introduced a global variable FRONT_NOT_BACK that allows for separation of code specific to front end or back end.

6/6: i2c decided to use master/slave switching scheme. both FE and BE stay in Slave mode until needing to transfer data, then swtich to master and send data. If interrupted, reverts to slave and gves an error (function will need to  resend). Also decided to implement slave addr and data clock holds to allow more control wrt accepting commands.

6/7: Potential issue identified when  card is removed and replaced with new card. No way for front end to know it needs to update. two potential solutions: keep a "dirty bit" like flag to mark changes, or just resend entire board. Decided to resend entire board because it is simplest method without needing more overhead

6/7: interpic communication scheme: a transmission consists of a command byte, plus additional information depending on the command. See interpic document